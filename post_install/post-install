#!/bin/bash

set -euo pipefail

project_root=$(realpath "$(dirname "$0")")


configure_networkmanager() {
    echo "Enabling NetworkManager.service"
    systemctl enable --now NetworkManager.service
    echo ""
}

set_ntp() {
    echo "Setting ntp..."
    timedatectl set-ntp true
    echo ""
}

configure_reflector() {
   echo "Configuring reflector"
   echo "Updating reflector.conf"
   cp "$project_root/assets/reflector.conf" /etc/xdg/reflector/reflector.conf

   echo "Enabling reflector.service and reflector.timer"
   # Enable reflector.service to run reflector on boot, enabling now also runs it immediately
   systemctl enable --now reflector.service
   systemctl enable reflector.timer

   echo ""
}

configure_pacman() {
    echo "Configuring pacman"
    conf="/etc/pacman.conf"

    echo "Setting Color option"
    if grep -Eq '^[#]*Color' "$conf"; then
        sed -i 's/^[#]*Color/Color/' "$conf"
    else
        sed -i '/^\[options\]/a Color' "$conf"
    fi

    echo "Setting CheckSpace option"
    if grep -Eq '^[#]*CheckSpace' "$conf"; then
        sed -i 's/^[#]*CheckSpace/CheckSpace/' "$conf"
    else
        sed -i '/^\[options\]/a CheckSpace' "$conf"
    fi
    
    echo "Setting VerbosePkgLists option"
    if grep -Eq '^[#]*VerbosePkgLists' "$conf"; then
        sed -i 's/^[#]*VerbosePkgLists/VerbosePkgLists/' "$conf"
    else
        sed -i '/^\[options\]/a VerbosePkgLists' "$conf"
    fi
    
    echo "Setting ParallelDownloads option"
    if grep -Eq '^[#]*ParallelDownloads' "$conf"; then
        sed -i 's/^[#]*ParallelDownloads.*/ParallelDownloads = 10/' "$conf"
    else
        sed -i '/^\[options\]/a ParallelDownloads = 10' "$conf"
    fi

    echo "Setting ILoveCandy option"
    if grep -Eq '^[#]*ILoveCandy' "$conf"; then
        sed -i 's/^[#]*ILoveCandy/ILoveCandy/' "$conf"
    else
        sed -i '/^\[options\]/a ILoveCandy' "$conf"
    fi
    echo ""
}

configure_makepkg() {
    echo "Configuring makepkg"

    # Allow makepkg to use all cores
    sed -i "s/^[#]*MAKEFLAGS\s*=.*/MAKEFLAGS=\"-j$(nproc)\"/" /etc/makepkg.conf
    
    echo ""
}

configure_sudoers() {
    echo "Configuring sudoers"
    sudoers_file="/etc/sudoers"

    # Uncomment the %wheel line if commented
    sed -i 's/^[#]\(%wheel ALL=(ALL:ALL) ALL\)/\1/' "$sudoers_file"

    # Add the Defaults insults line at the end if it's not already there
    if ! grep -q '^Defaults insults$' "$sudoers_file"; then
        {
            echo ""
            echo "#  If set, sudo will insult users when they enter an incorrect password."
            echo "Defaults insults"
        } >> "$sudoers_file"
    fi
    echo ""
}

install_additional_core_packages() {
    echo "Installing additional core packages"
    pacman -Syu --noconfirm bash-completion ed efibootmgr fwupd htop ibus libblockdev-lvm \
        lsof pacman-contrib smartmontools tldr udisks2-lvm2 util-linux \
        wget xdg-utils usbutils git neofetch
    echo ""
}


bash_profile() {
    echo "Updating /etc/profile"

    profile="/etc/profile"

    # Insert the snippet after the last line that starts with 'append_path'
    awk '
        /^append_path/ {
            last_append_line = NR
        }
        { lines[NR] = $0 }
        END {
            for (i=1; i<=NR; i++) {
                print lines[i]
                if (i == last_append_line) {
                    print "# check to see if a user'\''s id is >= 1000 and the $HOME/bin directory exists.  If so, append it to $PATH"
                    print "if [ \"$(id -u)\" -ge 1000 ] && [ -d \"$HOME/bin\" ]; then"
                    print "    append_path \"$HOME/bin\""
                    print "fi"
                }
            }
        }
    ' "$profile" > "${profile}.tmp" && mv "${profile}.tmp" "$profile"

    # Append environment variables at the end
    cat <<'EOF' >> "$profile"

# Set global environment variables (can be overwritten in each userâ€™s .bash_profile)
export EDITOR=vim
export VISUAL=vim
export PAGER=less
EOF

    echo ""
}

configure_bashrc() {
    echo "Updating /etc/bash.bashrc"
    cp "$project_root/assets/bash.bashrc" /etc/bash.bashrc
    echo ""
}

# function to selectively add users to groups
manage_group_membership() {
    local group_name="$1"

    # Check if group exists
    if ! getent group "$group_name" > /dev/null; then
        echo "Error: Group '$group_name' does not exist!" >&2
        return 1
    fi

    echo "Listing users and their membership in the group '$group_name':"
    echo "------------------------------------------------------------"

    # List non-root users (UID >= 1000)
    awk -F: '($3 >= 1000 && $1 != "nobody") { print $1 }' /etc/passwd | while read -r user; do
        if id -nG "$user" | grep -qw "$group_name"; then
            echo "$user: Member"
        else
            echo "$user: Not a member"
        fi
    done

    echo "------------------------------------------------------------"
    echo "Enter the usernames (space-separated) of users to add to the group '$group_name':"
    read -rp "Usernames: " user_list

    # Add each specified user to the group
    for user in $user_list; do
        if id "$user" &> /dev/null; then
            usermod -aG "$group_name" "$user"
            if [[ $? -eq 0 ]]; then
                echo "User '$user' successfully added to the group '$group_name'."
            else
                echo "Error: Could not add user '$user' to the group '$group_name'!" >&2
            fi
        else
            echo "Error: User '$user' does not exist!" >&2
        fi
    done
}

configure_networkmanager
set_ntp
configure_reflector
configure_pacman
configure_makepkg
configure_sudoers
install_additional_core_packages
bash_profile
configure_bashrc
