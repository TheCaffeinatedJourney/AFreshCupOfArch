#!/bin/bash
set -euo pipefail

hostname=""
processor_model=""
lvm_partition=""
volume_group=""
default_kernel=""
physical_volume=""
root_secret=""
is_vm=""

set_time() {
    echo "Setting timezone and syncing hardware clock to system clock."
    ln -sf /usr/share/zoneinfo/America/Detroit /etc/localtime
    hwclock --systohc
    timedatectl set-ntp true
}

configure_locale() {
    echo "Generating and configuring locales"

    # Uncomment locale for en_US.UTF-8
    sed -i 's/^#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
    locale-gen

    # Set the console keyboard layout and font
    #loadkeys en
    #setconsolefont XXXX

    # Create locale configuration
    locale >> /etc/locale.conf

    # Set language variable
    sed -i '/^LANG=/c\LANG=en_US.UTF-8' /etc/locale.conf
}

set_hostname() {
    echo "Setting the hostname to $hostname..."
    echo "$hostname" > /etc/hostname
    echo ""

    # Update the /etc/hosts file
    echo "Updating /etc/hosts..."
    cat <<EOF > /etc/hosts
127.0.0.1   localhost
::1         localhost
127.0.1.1   $hostname.localdomain $hostname
EOF

    hostnamectl set-hostname "$hostname"
    echo "Hostname and /etc/hosts updated successfully!"
}

install_ucode() {
    echo "Detecting processor type for microcode installation..."

    # Determine the appropriate microcode package
    local ucode_package
    if echo "$processor_model" | grep -iq "Intel"; then
        ucode_package="intel-ucode"
        echo "Intel processor detected."
    elif echo "$processor_model" | grep -iq "AMD"; then
        ucode_package="amd-ucode"
        echo "AMD processor detected."
    else
        echo "Unknown processor type. Skipping microcode installation."
        echo ""
        return 
    fi

    # Check if the microcode package is already installed
    if pacman -Qq "$ucode_package" > /dev/null 2>&1; then
        echo "$ucode_package is already installed. Skipping."
        echo ""
        return 
    fi

    # Install the appropriate microcode package
    echo "Installing $ucode_package..."
    pacman -S --noconfirm "$ucode_package"
    echo ""
}

configure_mkinitcpio() {
    echo "Configuring mkinitcpio"

    # Update modules to use a keyboard and displays connected through a docing sation and/or USB3 hub
    sed -i 's/^MODULES=.*/MODULES=(i915 usbhid xhci_hcd)/' /etc/mkinitcpio.conf

    # Modify mkinitcpio to include necessary hooks for LVM, encryption, etc.
    sed -i 's/^HOOKS=.*/HOOKS=(base autodetect modconf microcode kms keymap keyboard udev block encrypt lvm2 filesystems fsck)/' /etc/mkinitcpio.conf

    # Update the compression to lz4
    sed -i 's/^#COMPRESSION="lz4"/COMPRESSION="lz4"/' /etc/mkinitcpio.conf

    echo "mkinitcpio.conf modules, hooks, and compression configured successfuly!"
}

update_encrypt_hook() {
    src_file="/usr/lib/initcpio/hooks/encrypt"
    dest_file="/etc/initcpio/hooks/encrypt"

    mkdir -p /etc/initcpio/hooks

    cp "$src_file" "$dest_file"

    warning_message="\n************************************************************************\n WARNING: UNAUTHORIZED ACCESS OR USE OF THIS SYSTEM IS A VIOLATION OF\n FEDERAL LAW (18 U.S.C. ยง 1030) AND MAY RESULT IN CRIMINAL PROSECUTION.\n************************************************************************\n\n    This system is protected by encryption and intrusion detection.\n   Any attempt to access or use this system constitutes an agreement\n   to collect personally identifiable information, including\n   but not limited to GPS location, IP address, and audio and video\n   recording.  This data will be logged and transmitted for security\n   and compliance purposes.\n\nIf you agree to these terms, enter a password to access the \${cryptname} volume."

    # replace the original prompt with the new warning message
    sed -i "s/A password is required to access the \${cryptname} volume:/$warning_message/g" "$dest_file"

    echo "The encrypt hook has been updated with the new warning message."
    echo ""
}

surpress_initramfs_warnings() {
    # see https://intel.github.io/quickassist/RN/In-Tree/in_tree_firmware_RN.html?highlight=qat_420xx#id6
    echo "Device not available" > /lib/firmware/qat_420xx.bin
    echo "Device not available" > /lib/firmware/qat_420xx_mmp.bin
}

generate_initramfs() {
    echo "Identifying installed kernels and generating initramfs..."

    # Find installed kernels (look for /boot/vmlinuz-* files)
    kernels=$(ls /boot/vmlinuz-* | xargs -n 1 basename | sed 's/vmlinuz-//')

    # Generate initramfs for each installed kernel
    for kernel in $kernels; do
        echo "Generating initramfs for kernel: $kernel"
        mkinitcpio -p "$kernel"
    done

    echo "Initramfs generation complete for all installed kernels."
    echo ""
}

get_uuid() {
    blkid -s UUID -o value "$1"
}

configure_systemd-boot() {

    echo "Configuring systemd-boot"

    # Find installed kernels (look for /boot/vmlinuz-* files)
    kernels=($(ls /boot/vmlinuz-* | xargs -n 1 basename | sed 's/vmlinuz-//'))

    if [ ${#kernels[@]} -eq 0 ]; then
        echo "No kernels found. Exiting."
        exit 1
    fi

    # Display installed kernels to the user
    echo "Installed kernels:"
    for kernel in "${kernels[@]}"; do
        echo "  - $kernel"
    done

    # Identify the root and swap partitions (assuming LVM)
    root_lv="/dev/mapper/$volume_group-lv_root"
    swap_lv="/dev/mapper/$volume_group-lv_swap"

    # Get UUID of the cryptdevice
    cryptdevice_uuid=$(get_uuid "$lvm_partition")

 #   # Get the swap partition UUID for the resume option
 #   swap_uuid=$(get_uuid "$swap_lv")

    # Set up the bootloader entries
    echo "Installing bootloader"
    bootctl install
    
    # Enable automatic updates of the UEFI boot manager
    echo "Enabling systemd-boot-update.service"
    systemctl enable systemd-boot-update.service

    # Generate loader.conf
    echo "Generating /boot/loader/loader.conf..."
    cat <<EOF > /boot/loader/loader.conf
default $default_kernel.conf
timeout 3
editor 0
EOF

    # Generate entries for each kernel
    # cryptdevice=UUID=device-UUID:cryptlvm root=/dev/MyVolGroup/root
    for kernel in "${kernels[@]}"; do
        echo "Generating /boot/loader/entries/${kernel}.conf..."

        cat <<EOF > /boot/loader/entries/"${kernel}".conf
title   $kernel
linux /vmlinuz-$kernel
initrd /$ucode_package.img
initrd /initramfs-$kernel.img
options cryptdevice=UUID=$cryptdevice_uuid:$physical_volume root=$root_lv resume=$swap_lv rw
EOF
    done
}

set_root_password() {
    if [[ -n "${root_secret}" ]]; then
        echo "Setting root password..."
        echo -e "${root_secret}" | passwd -s root
        if [[ $? -eq 0 ]]; then
            echo "Root password set successfully."
        else
            echo "Failed to set root password."
        fi
    else
        while true; do
            echo "Please enter the root password:"
            passwd root
            if [[ $? -eq 0 ]]; then
                echo "Root password set successfully."
                break
            else
                echo "Password setting failed. Please try again."
            fi
        done
    fi
}



main() {
    set_time
    configure_locale
    set_hostname
    install_ucode
    configure_mkinitcpio
    surpress_initramfs_warnings
    update_encrypt_hook
    generate_initramfs
    configure_systemd-boot
    set_root_password
}

main
